"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[283],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return d}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var u=r.createContext({}),c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,u=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=c(n),d=i,m=p["".concat(u,".").concat(d)]||p[d]||h[d]||a;return n?r.createElement(m,o(o({ref:t},l),{},{components:n})):r.createElement(m,o({ref:t},l))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=p;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},8152:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return u},default:function(){return d},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return h}});var r=n(3117),i=n(102),a=(n(7294),n(3905)),o=["components"],s={},u="Authentication",c={unversionedId:"usage/authentication",id:"usage/authentication",title:"Authentication",description:"Authentication with Bigsby revolves around the concept of authenticators and AuthSchemas.",source:"@site/docs/usage/authentication.mdx",sourceDirName:"usage",slug:"/usage/authentication",permalink:"/bigsby/docs/usage/authentication",editUrl:"https://github.com/burketyler/bigsby/docs/usage/authentication.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Versioning",permalink:"/bigsby/docs/usage/versioning"},next:{title:"Lifecycle",permalink:"/bigsby/docs/usage/lifecycle"}},l={},h=[{value:"Authenticators",id:"authenticators",level:2},{value:"Authorizing a request",id:"authorizing-a-request",level:3},{value:"Denying a request",id:"denying-a-request",level:3},{value:"Custom Errors",id:"custom-errors",level:3},{value:"Session Information",id:"session-information",level:3},{value:"Auth Scheme",id:"auth-scheme",level:2},{value:"Inline Authenticator",id:"inline-authenticator",level:2},{value:"Aliases",id:"aliases",level:2}],p={toc:h};function d(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"authentication"},"Authentication"),(0,a.kt)("p",null,"Authentication with Bigsby revolves around the concept of ",(0,a.kt)("inlineCode",{parentName:"p"},"authenticators")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"AuthSchemas"),"."),(0,a.kt)("h2",{id:"authenticators"},"Authenticators"),(0,a.kt)("p",null,"An authenticator is an asynchronous method provided to Bigsby that's used to determine if a\nrequest is authenticated and/or authorised to perform the requested action."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'async function apiKeyAuthenticator(ctx: RequestContext): Promise<void> {\n  const apiKey = ctx.event.headers["X-Api-Key"];\n\n  if (!apiKey) {\n    // Results in 401\n    throw new UnauthorizedError();\n  } else if (!isValidApiKey(apiKey)) {\n    // Results in 403\n    throw new ForbiddenError();\n  } else if (!isUserEnabled(apiKey)) {\n    // 401 by default\n    // Catch me in onAuthFail to return custom response\n    throw new CustomError();\n  } else {\n    // For use later in lifecycle\n    ctx.apiKey = apiKey;\n  }\n}\n')),(0,a.kt)("h3",{id:"authorizing-a-request"},"Authorizing a request"),(0,a.kt)("p",null,"If an authenticator function resolves, it's determined that the request is authorized\nand that the caller has sufficient privileges to perform the action."),(0,a.kt)("h3",{id:"denying-a-request"},"Denying a request"),(0,a.kt)("p",null,"If an authenticator function rejects, it's determined that the request is unauthorized or that the\ncaller doesn't have sufficient privileges to perform the action. You can define which scenario\nis applicable by throwing the corresponding error type:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"UnauthorizedError")," will cause Bigsby to return a ",(0,a.kt)("inlineCode",{parentName:"li"},"401 Unauthorized")," response."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ForbiddenErrror")," will cause Bigsby to return a ",(0,a.kt)("inlineCode",{parentName:"li"},"403 Forbidden")," response.")),(0,a.kt)("h3",{id:"custom-errors"},"Custom Errors"),(0,a.kt)("p",null,"Any value can be thrown from an authenticator. By default, Bigsby will return a ",(0,a.kt)("inlineCode",{parentName:"p"},"401")," if\nthe error type isn't recognized. This behaviour can be overridden by listening to the ",(0,a.kt)("inlineCode",{parentName:"p"},"onAuthFail"),"\n",(0,a.kt)("a",{parentName:"p",href:"/bigsby/docs/usage/lifecycle"},"lifecycle")," hook and returning a custom ",(0,a.kt)("inlineCode",{parentName:"p"},"ApiResponse"),"."),(0,a.kt)("h3",{id:"session-information"},"Session Information"),(0,a.kt)("p",null,"Authenticators receive the Bigsby ",(0,a.kt)("inlineCode",{parentName:"p"},"RequestContext"),", giving full access to the values required\nto verify a request and the ability to store session metadata, user information, etc.\nfor consumption later in the request's ",(0,a.kt)("a",{parentName:"p",href:"/bigsby/docs/usage/lifecycle"},"lifecycle"),"."),(0,a.kt)("h2",{id:"auth-scheme"},"Auth Scheme"),(0,a.kt)("p",null,"Auth schemes are named authenticators that can be registered at the Bigsby instance level\nvia the ",(0,a.kt)("inlineCode",{parentName:"p"},"registerAuthScheme")," method. The schemes can be consumed by any handler created with the\ninstance."),(0,a.kt)("p",null,"Provide the scheme name to the ",(0,a.kt)("inlineCode",{parentName:"p"},"@Authentication")," decorator to attach it to the handler class."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'const bigsby = new Bigsby();\n\nbigsby.registerAuthScheme({\n  name: "ApiKeyAuth",\n  authenticator: async ({ event }): Promise<void> => {\n    if (!event.headers["X-Api-Key"]) {\n      throw new UnauthorizedError();\n    }\n  },\n});\n\n@Api()\n@Authentication("ApiKeyAuth")\nclass ArnyQuotesHandler implements ApiHandler {\n  public async invoke(): Promise<string> {\n    return getQuote();\n  }\n}\n\nexport default bigsby.createApiHandler(ArnyQuotesHandler);\n')),(0,a.kt)("h2",{id:"inline-authenticator"},"Inline Authenticator"),(0,a.kt)("p",null,"An authenticator can be attached directly to a handler class using the ",(0,a.kt)("inlineCode",{parentName:"p"},"@Authentication")," decorator.\nSimply pass your authenticator method as an argument without needing to onRegister it as a scheme first."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'const bigsby = new Bigsby();\n\nasync function apiKeyAuthenticator({ event }): Promise<void> {\n  if (!event.headers["X-Api-Key"]) {\n    throw new UnauthorizedError();\n  }\n}\n\n@Api()\n@Authentication(apiKeyAuthenticator)\nclass ArnyQuotesHandler implements ApiHandler {\n  public async invoke(): Promise<string> {\n    return getQuote();\n  }\n}\n\nexport default bigsby.createApiHandler(ArnyQuotesHandler);\n')),(0,a.kt)("h2",{id:"aliases"},"Aliases"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"@Authentication")," can be shortened to ",(0,a.kt)("inlineCode",{parentName:"li"},"@Auth"),".")))}d.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[240],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(t),m=i,v=u["".concat(l,".").concat(m)]||u[m]||d[m]||a;return t?r.createElement(v,o(o({ref:n},c),{},{components:t})):r.createElement(v,o({ref:n},c))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var p=2;p<a;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},2915:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return d}});var r=t(3117),i=t(102),a=(t(7294),t(3905)),o=["components"],s={},l="Versioning",p={unversionedId:"usage/versioning",id:"usage/versioning",title:"Versioning",description:"Bigsby supports header and path based versioning out of the box. Define a method, key, and",source:"@site/docs/usage/versioning.mdx",sourceDirName:"usage",slug:"/usage/versioning",permalink:"/bigsby/docs/usage/versioning",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Validation",permalink:"/bigsby/docs/usage/validation"},next:{title:"Authentication",permalink:"/bigsby/docs/usage/authentication"}},c={},d=[{value:"Path vs Header",id:"path-vs-header",level:2},{value:"Version -&gt; Handler class map",id:"version---handler-class-map",level:2},{value:"Invalid version",id:"invalid-version",level:2},{value:"Aliases",id:"aliases",level:2}],u={toc:d};function m(e){var n=e.components,t=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"versioning"},"Versioning"),(0,a.kt)("p",null,"Bigsby supports header and path based versioning out of the box. Define a ",(0,a.kt)("inlineCode",{parentName:"p"},"method"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"key"),", and\n",(0,a.kt)("inlineCode",{parentName:"p"},"defaultVersion")," in your API ",(0,a.kt)("a",{parentName:"p",href:"/bigsby/docs/usage/configuration"},"configuration"),", then provide a list of handler\nclasses when creating your handler function in order to have Bigsby automatically route\nrequests to the correct function."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'const bigsby = new Bigsby({\n  api: {\n    versioning: {\n      method: VersioningMethod.HEADER,\n      key: "X-Api-Version",\n      defaultVersion: "v1",\n    },\n  },\n});\n\n@Api()\n@Version("v1")\nclass ArnyQuotesHandlerV1 implements ApiHandler {\n  public async invoke(): Promise<string> {\n    return getQuote();\n  }\n}\n\n@Api()\n@Version("v2")\nclass ArnyQuotesHandlerV2 implements ApiHandler {\n  public async invoke(): Promise<string> {\n    return getQuoteTheNewWay();\n  }\n}\n\nexport default bigsby.createApiHandler([\n  ArnyQuotesHandlerV1,\n  ArnyQuotesHandlerV2,\n]);\n')),(0,a.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"You don't have to define versioning config at the Bigsby instance level, it's perfectly\nacceptable to define it directly in your ",(0,a.kt)("inlineCode",{parentName:"p"},"createApiHandler")," config instead if your use\ncase requires it to be scoped only to the function."))),(0,a.kt)("h2",{id:"path-vs-header"},"Path vs Header"),(0,a.kt)("p",null,"The versioning system requires a defined ",(0,a.kt)("inlineCode",{parentName:"p"},"VersioningMethod"),"."),(0,a.kt)("p",null,"When header based versioning is chosen Bigsby will parse the incoming event's ",(0,a.kt)("inlineCode",{parentName:"p"},"headers"),"\nproperty searching for a header with the same name as the ",(0,a.kt)("inlineCode",{parentName:"p"},"key")," provided. When choosing\npath based versioning, it will instead search the incoming ",(0,a.kt)("inlineCode",{parentName:"p"},"pathParameters")," property."),(0,a.kt)("p",null,"If the version header is missing in either scenario, the ",(0,a.kt)("inlineCode",{parentName:"p"},"defaultVersion")," will be used\ninstead."),(0,a.kt)("h2",{id:"version---handler-class-map"},"Version -> Handler class map"),(0,a.kt)("p",null,"It's also possible to define the mapping between handler classes and versions via a mapping\nobject instead of using the ",(0,a.kt)("inlineCode",{parentName:"p"},"@Version")," decorator. The above example would instead be written\nlike this."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'const bigsby = new Bigsby({\n  api: {\n    versioning: {\n      method: VersioningMethod.HEADER,\n      key: "X-Api-Version",\n      defaultVersion: "v1",\n    },\n  },\n});\n\n@Api()\nclass ArnyQuotesHandlerV1 implements ApiHandler {\n  public async invoke(): Promise<string> {\n    return getQuote();\n  }\n}\n\n@Api()\nclass ArnyQuotesHandlerV2 implements ApiHandler {\n  public async invoke(): Promise<string> {\n    return getQuoteTheNewWay();\n  }\n}\n\nexport default bigsby.createApiHandler({\n  v1: ArnyQuotesHandlerV1,\n  v2: ArnyQuotesHandlerV2,\n});\n')),(0,a.kt)("h2",{id:"invalid-version"},"Invalid version"),(0,a.kt)("p",null,"In the event that a version has been provided, but it doesn't match any of the mapped\nhandler classes, Bigsby will return a ",(0,a.kt)("inlineCode",{parentName:"p"},"400 Bad Request")," response."),(0,a.kt)("h2",{id:"aliases"},"Aliases"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"@Version")," can be shortened to ",(0,a.kt)("inlineCode",{parentName:"li"},"@V"),".")))}m.isMDXComponent=!0}}]);
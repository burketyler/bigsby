"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[152],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),u=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=u(e.components);return a.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=u(t),m=r,y=d["".concat(l,".").concat(m)]||d[m]||c[m]||i;return t?a.createElement(y,o(o({ref:n},p),{},{components:t})):a.createElement(y,o({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var u=2;u<i;u++)o[u]=t[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9739:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return c}});var a=t(3117),r=t(102),i=(t(7294),t(3905)),o=["components"],s={},l="Event Parsing",u={unversionedId:"usage/event-parsing",id:"usage/event-parsing",title:"Event Parsing",description:"Bigsby provides a comprehensive set of decorators to map API Gateway events into the parameters your handler",source:"@site/docs/usage/event-parsing.mdx",sourceDirName:"usage",slug:"/usage/event-parsing",permalink:"/bigsby/docs/usage/event-parsing",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Dependency Injection",permalink:"/bigsby/docs/usage/dependency-injection"},next:{title:"Validation",permalink:"/bigsby/docs/usage/validation"}},p={},c=[{value:"Key inference",id:"key-inference",level:2},{value:"Body",id:"body",level:2},{value:"Query strings",id:"query-strings",level:2},{value:"Param parameters",id:"param-parameters",level:2},{value:"Headers",id:"headers",level:2},{value:"Request context",id:"request-context",level:2},{value:"Type inference &amp; coercion",id:"type-inference--coercion",level:2},{value:"Supported types",id:"supported-types",level:3}],d={toc:c};function m(e){var n=e.components,t=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"event-parsing"},"Event Parsing"),(0,i.kt)("p",null,"Bigsby provides a comprehensive set of decorators to map API Gateway events into the parameters your handler\nneeds, resulting in concise, clean and easy to read code. Define the inputs that your handler requires, and let\nBigsby inject the value into arguments of your handler."),(0,i.kt)("h2",{id:"key-inference"},"Key inference"),(0,i.kt)("p",null,"Bigsby attempts to automatically infer the key to use when querying the event payload (e.g. the name of a header)\nbased on the function argument's name when no key is provided. Define the key explicitly as a string when calling\nthe decorator to let Bigsby know which property to read."),(0,i.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Webpack and other bundlers will minify your code, including argument names. If you're using any kind of code\nminification that changes a function argument's names, you should provide a key instead of relying on automatic\ninference."))),(0,i.kt)("h2",{id:"body"},"Body"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"@Api()\nclass ArnyQuotesHandler implements ApiHandler {\n  public async invoke(@Body() request: GetQuoteRequest): Promise<string> {\n    return getQuote(request);\n  }\n}\n")),(0,i.kt)("h2",{id:"query-strings"},"Query strings"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'@Api()\nclass ArnyQuotesHandler implements ApiHandler {\n  public async invoke(\n    @Query() movie: string,\n    @Query("movie") myQueryString\n  ): Promise<string> {\n    // movie and myQueryString will both have the same value\n    return getQuote(movie);\n  }\n}\n')),(0,i.kt)("h2",{id:"param-parameters"},"Param parameters"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'@Api()\nclass ArnyQuotesHandler implements ApiHandler {\n  public async invoke(\n    @Param() movie: string,\n    @Param("movie") myPathParam\n  ): Promise<string> {\n    // movie and myPathParam will both have the same value\n    return getQuote(movie);\n  }\n}\n')),(0,i.kt)("h2",{id:"headers"},"Headers"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'@Api()\nclass ArnyQuotesHandler implements ApiHandler {\n  public async invoke(\n    @Header() movie: string,\n    @Header("movie") myHeader\n  ): Promise<string> {\n    // movie and myHeader will both have the same value\n    return getQuote(movie);\n  }\n}\n')),(0,i.kt)("h2",{id:"request-context"},"Request context"),(0,i.kt)("p",null,"You can access the Bigsby ",(0,i.kt)("inlineCode",{parentName:"p"},"RequestContext")," using the ",(0,i.kt)("inlineCode",{parentName:"p"},"@Context")," decorator. This is a disposable object which\ncontains data that may be useful, such as the original event payload, the handler's configuration and the Bigsby\ninstance the handler belongs to."),(0,i.kt)("p",null,"The request context's ",(0,i.kt)("inlineCode",{parentName:"p"},"state")," property can be extended to suit your needs, you may use a plugin or lifecycle\nhook that adds metadata or information to the request for consumption during execution."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'@Api()\nclass ArnyQuotesHandler implements ApiHandler {\n  public async invoke(@Context() context: RequestContext): Promise<string> {\n    if (context.config.auth === "MyAuthScheme") {\n      return signResponse(getQuote());\n    } else {\n      return getQuote();\n    }\n  }\n}\n')),(0,i.kt)("h2",{id:"type-inference--coercion"},"Type inference & coercion"),(0,i.kt)("p",null,"Bigsby uses reflection to infer the type of the arguments you define and will attempt to coerce the value\nto the required type by default. This behaviour can be turned off by settings the handler config value\n",(0,i.kt)("inlineCode",{parentName:"p"},"request.enableTypeCoercion")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,i.kt)("h3",{id:"supported-types"},"Supported types"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"object")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"string")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"number")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"boolean"))),(0,i.kt)("p",null,"In the example below the body has been declared as an ",(0,i.kt)("inlineCode",{parentName:"p"},"object")," - Bigsby will JSON parse the API Gateway event's body\nfield and inject it into your handler."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'@Api()\nclass ArnyQuotesHandler implements ApiHandler {\n  public async invoke(@Body() request: { movie: string }): Promise<string> {\n    console.log(typeof request, "I\'m an object!");\n    return getQuote(request.movie);\n  }\n}\n')),(0,i.kt)("p",null,"If we're to add a header parsing rule and declare it as a ",(0,i.kt)("inlineCode",{parentName:"p"},"number"),", Bigsby will convert the value into a number and\ninject it into your handler."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'@Api()\nclass ArnyQuotesHandler implements ApiHandler {\n  public async invoke(\n    @Body() request: GetQuoteRequest,\n    @Header() limit: number\n  ): Promise<string> {\n    console.log(typeof limit, "I\'m a number!");\n\n    return getQuote(movie, limit);\n  }\n}\n')),(0,i.kt)("p",null,"Type inference and coercion can be applied to any of the event parsing rules listed above."),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"If type coercion fails, a warning will be logged, and the argument value will be ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined"),". The Handler\nwill still execute though, so it's up to you to add the necessary ",(0,i.kt)("a",{parentName:"p",href:"/bigsby/docs/usage/validation"},"validation")," or include null\nchecks to ensure your handler can deal with invalid or unexpected inputs."))))}m.isMDXComponent=!0}}]);
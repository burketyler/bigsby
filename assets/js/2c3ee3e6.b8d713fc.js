"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[254],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=i.createContext({}),l=function(e){var n=i.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=l(e.components);return i.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(t),m=r,g=u["".concat(c,".").concat(m)]||u[m]||d[m]||a;return t?i.createElement(g,o(o({ref:n},p),{},{components:t})):i.createElement(g,o({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=u;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<a;l++)o[l]=t[l];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},6002:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return d}});var i=t(3117),r=t(102),a=(t(7294),t(3905)),o=["components"],s={},c="Dependency Injection",l={unversionedId:"usage/dependency-injection",id:"usage/dependency-injection",title:"Dependency Injection",description:"Bigsby uses ts-injection under the hood to provide an",source:"@site/docs/usage/dependency-injection.mdx",sourceDirName:"usage",slug:"/usage/dependency-injection",permalink:"/bigsby/docs/usage/dependency-injection",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Logging",permalink:"/bigsby/docs/usage/logging"},next:{title:"Event Parsing",permalink:"/bigsby/docs/usage/event-parsing"}},p={},d=[{value:"InjectionContainer",id:"injectioncontainer",level:2},{value:"Injectable",id:"injectable",level:2},{value:"Injectable objects",id:"injectable-objects",level:2},{value:"Types of injection",id:"types-of-injection",level:2},{value:"\ud83c\udf3e Field injection",id:"-field-injection",level:3},{value:"\ud83d\udd28 Constructor injection",id:"-constructor-injection",level:3},{value:"Environment Variables",id:"environment-variables",level:2}],u={toc:d};function m(e){var n=e.components,t=(0,r.Z)(e,o);return(0,a.kt)("wrapper",(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"dependency-injection"},"Dependency Injection"),(0,a.kt)("p",null,"Bigsby uses ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/burketyler/ts-injection"},"ts-injection")," under the hood to provide an\neasy to use, intuitive and clean dependency injection interface. The main building blocks of DI in a\nBigsby app are the ",(0,a.kt)("inlineCode",{parentName:"p"},"InjectionContainer")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Injectable")," classes."),(0,a.kt)("h2",{id:"injectioncontainer"},"InjectionContainer"),(0,a.kt)("p",null,"An ",(0,a.kt)("inlineCode",{parentName:"p"},"InjectionContainer")," is an encapsulated DI environment where Injectables can be stored and retrieved.\nEach Bigsby instance is created with its own InjectionContainer and will have its own instances of\nInjectable classes and objects."),(0,a.kt)("div",{style:{display:"flex",justifyContent:"center"}},(0,a.kt)("a",{href:"/bigsby/img/di-container-diagram.png",target:"_blank",style:{width:"50%"}},(0,a.kt)("img",{src:"/bigsby/img/di-container-diagram.png",alt:"Dependency Injection Containers"}))),(0,a.kt)("h2",{id:"injectable"},"Injectable"),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"https://burketyler.github.io/ts-injection/docs/usage#defining-an-injectable"},"@Injectable"),"\ndecorator lets the framework know that you intend for the class to be handled by the injection container.\nCommon use cases for injectable classes are re-usable components and service providers. Consider a\nsimplified version of handler class we created in the previous section ",(0,a.kt)("a",{parentName:"p",href:"/bigsby/docs/getting-started"},"getting started"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"@Api()\nclass ArnyQuotesHandler implements ApiHandler {\n  constructor(private readonly service: ArnyService) {}\n\n  public async invoke(): Promise<string> {\n    return this.service.getQuote();\n  }\n}\n")),(0,a.kt)("p",null,"The class relies on a service provider to retrieve a famous quote by Arnold Schwarzenegger. We can enable\nautomatic injection of the ",(0,a.kt)("inlineCode",{parentName:"p"},"ArnyService")," class by defining it as an ",(0,a.kt)("inlineCode",{parentName:"p"},"@Injectable")," and listing it as a\nconstructor argument on the ",(0,a.kt)("inlineCode",{parentName:"p"},"ArnyQuotesHandler"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'@Injectable()\nclass ArnyService {\n  public getQuote(): string {\n    const quotes = [\n      "Hasta la vista, baby!",\n      "If it bleeds, we can kill it.",\n      "Come with me if you want to live.",\n    ];\n\n    return getRandomItem(quotes);\n  }\n}\n')),(0,a.kt)("h2",{id:"injectable-objects"},"Injectable objects"),(0,a.kt)("p",null,"You may come across use cases where manually registering objects or classes in the DI is\nrequired. In this scenario you can access the DI container via the Bigsby instance and call the ",(0,a.kt)("inlineCode",{parentName:"p"},"register"),"\nmethod. An ",(0,a.kt)("inlineCode",{parentName:"p"},"InjectableItem")," is returned including a unique token that can be used to reference the\ninjectable in the future."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const di = bigsby.getInjectionContainer();\n\nconst config: Config = {\n  printResponse: true,\n};\n\nconst { token: configToken } = di.register(config).successOrThrow();\n")),(0,a.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"Make sure all of your injectable registrations are completed ",(0,a.kt)("em",{parentName:"p"},"before")," calling ",(0,a.kt)("inlineCode",{parentName:"p"},"createApiHandler"),",\notherwise they may not be available to your handler functions."))),(0,a.kt)("h2",{id:"types-of-injection"},"Types of injection"),(0,a.kt)("p",null,"The above example is a specific type of constructor injection that doesn't rely on any decorators.\nIn addition to this type of injection, you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"@Autowire")," decorator to perform different\ninjection types."),(0,a.kt)("h3",{id:"-field-injection"},"\ud83c\udf3e Field injection"),(0,a.kt)("p",null,"If we preferred, the ",(0,a.kt)("inlineCode",{parentName:"p"},"ArnyService")," class could instead be injected into the ",(0,a.kt)("inlineCode",{parentName:"p"},"ArnyQuotesHandler")," class,\nusing field injection. The config object we manually injected can also be injected using its injection\ntoken."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"@Api()\nclass ArnyQuotesHandler implements ApiHandler {\n  @Autowire(ArnyService)\n  private readonly service!: ArnyService;\n\n  @Autowire(configToken)\n  private readonly config!: Config;\n\n  constructor() {\n    // I don't have access to my injectables here\n  }\n\n  public async invoke(): Promise<string> {\n    const response = this.service.getQuote();\n\n    if (this.config.printResponse) {\n      console.log(response);\n    }\n\n    return response;\n  }\n}\n")),(0,a.kt)("h3",{id:"-constructor-injection"},"\ud83d\udd28 Constructor injection"),(0,a.kt)("p",null,"The same can be achieved via constructor injection, which is the only injection type which\nallows access to the injectables inside the class constructor."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"@Api()\nclass ArnyQuotesHandler implements ApiHandler {\n  constructor(\n    @Autowire(configToken)\n    private readonly config: Config,\n    @Autowire(ArnyService) // <- Not mandatory (see below)\n    private readonly service: ArnyService\n  ) {\n    // I have access to my injectables here\n  }\n\n  public async invoke(): Promise<string> {\n    const response = this.service.getQuote();\n\n    if (this.config.printResponse) {\n      console.log(response);\n    }\n\n    return response;\n  }\n}\n")),(0,a.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"The ",(0,a.kt)("inlineCode",{parentName:"p"},"@Autowire")," decorator isn't strictly required for classes that have been registered with\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"@Injectable")," decorator. The injection framework is smart enough to infer what should be injected by\nadding the class as a parameter (as seen in the ",(0,a.kt)("a",{parentName:"p",href:"#injectable"},"first example"),")."))),(0,a.kt)("h2",{id:"environment-variables"},"Environment Variables"),(0,a.kt)("p",null,"You can inject environment variables into class members using the ",(0,a.kt)("inlineCode",{parentName:"p"},"@Env")," annotation."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'process.env.MY_STR = "test";\n\n@Api()\nclass ArnyQuotesHandler implements ApiHandler {\n  @Env("MY_STR")\n  private myString: string;\n\n  constructor() {\n    console.log(this.myString);\n    // "test"\n  }\n}\n')),(0,a.kt)("p",null,"For a more in-depth look at all the DI features available in ts-injection, head over and check out the\nofficial ",(0,a.kt)("a",{parentName:"p",href:"https://burketyler.github.io/ts-injection/"},"documentation"),"."))}m.isMDXComponent=!0}}]);
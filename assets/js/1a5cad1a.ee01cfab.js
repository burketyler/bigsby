"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[795],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=p(t),m=i,h=d["".concat(l,".").concat(m)]||d[m]||c[m]||r;return t?a.createElement(h,s(s({ref:n},u),{},{components:t})):a.createElement(h,s({ref:n},u))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,s=new Array(r);s[0]=d;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:i,s[1]=o;for(var p=2;p<r;p++)s[p]=t[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1164:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return c}});var a=t(3117),i=t(102),r=(t(7294),t(3905)),s=["components"],o={},l="Validation",p={unversionedId:"usage/validation",id:"usage/validation",title:"Validation",description:"Leveraging Joi's powerful schema description language, Bigsby makes it easy",source:"@site/docs/usage/validation.mdx",sourceDirName:"usage",slug:"/usage/validation",permalink:"/bigsby/docs/usage/validation",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Event Parsing",permalink:"/bigsby/docs/usage/event-parsing"},next:{title:"Versioning",permalink:"/bigsby/docs/usage/versioning"}},u={},c=[{value:"Request",id:"request",level:2},{value:"Body",id:"body",level:3},{value:"Headers",id:"headers",level:3},{value:"Path Parameters",id:"path-parameters",level:3},{value:"Query Strings",id:"query-strings",level:3},{value:"Response",id:"response",level:2},{value:"Aliases",id:"aliases",level:2}],d={toc:c};function m(e){var n=e.components,t=(0,i.Z)(e,s);return(0,r.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"validation"},"Validation"),(0,r.kt)("p",null,"Leveraging ",(0,r.kt)("a",{parentName:"p",href:"https://joi.dev"},"Joi's")," powerful schema description language, Bigsby makes it easy\nto define complex request and response schemas. Configuring schemas can be done via decorators\nor in your handler's config."),(0,r.kt)("h2",{id:"request"},"Request"),(0,r.kt)("p",null,"Request validation can be applied to the ",(0,r.kt)("inlineCode",{parentName:"p"},"body"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"headers"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"queryStrings")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"pathParameters"),"\nof an incoming request. The ",(0,r.kt)("inlineCode",{parentName:"p"},"RequestValidationSchema")," object consists of Joi schemas that\ncan be applied to each aspect of the event payload."),(0,r.kt)("p",null,"When request validation fails, the ",(0,r.kt)("inlineCode",{parentName:"p"},"onRequestInvalid")," hook is called and a default ",(0,r.kt)("inlineCode",{parentName:"p"},"400 Bad Request"),"\nresponse is returned by the handler. You can customize this behaviour by returning a different ",(0,r.kt)("inlineCode",{parentName:"p"},"ApiResponse"),"\nfrom ",(0,r.kt)("inlineCode",{parentName:"p"},"onRequestInvalid"),"."),(0,r.kt)("h3",{id:"body"},"Body"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const requestSchema: RequestValidationSchema = {\n  body: Joi.object({\n    movie: Joi.string().required(),\n  }),\n};\n\n@Api()\nclass ArnyQuotesHandler implements ApiHandler {\n  @RequestSchema(requestSchema)\n  public async invoke(@Body() request: GetQuoteRequest): Promise<string> {\n    return getQuote(request.movie);\n  }\n}\n")),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"Content-Type")," of the incoming request is ",(0,r.kt)("inlineCode",{parentName:"p"},"application/json"),", then body validation\nis applied to the parsed javascript object, otherwise it will be applied to the raw string\nvalue received."))),(0,r.kt)("h3",{id:"headers"},"Headers"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const requestSchema: RequestValidationSchema = {\n  headers: Joi.object({\n    "x-api-version": Joi.string().required(),\n  }),\n};\n\n@Api()\nclass ArnyQuotesHandler implements ApiHandler {\n  @RequestSchema(requestSchema)\n  public async invoke(): Promise<string> {\n    return getQuote();\n  }\n}\n')),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Request header names will always be lowercase."))),(0,r.kt)("h3",{id:"path-parameters"},"Path Parameters"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const requestSchema: RequestValidationSchema = {\n  pathParameters: Joi.object({\n    movieId: Joi.string().uuid().required(),\n  }),\n};\n\n@Api()\nclass ArnyQuotesHandler implements ApiHandler {\n  @RequestSchema(requestSchema)\n  public async invoke(@Path movieId: string): Promise<string> {\n    return getQuote(movieId);\n  }\n}\n")),(0,r.kt)("h3",{id:"query-strings"},"Query Strings"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const requestSchema: RequestValidationSchema = {\n  queryStringParameters: Joi.object({\n    movieId: Joi.string().uuid().required(),\n  }),\n};\n\n@Api()\nclass ArnyQuotesHandler implements ApiHandler {\n  @RequestSchema(requestSchema)\n  public async invoke(@Query movieId: string): Promise<string> {\n    return getQuote(movieId);\n  }\n}\n")),(0,r.kt)("h2",{id:"response"},"Response"),(0,r.kt)("p",null,"Response validation is applied to the ",(0,r.kt)("inlineCode",{parentName:"p"},"body")," of a handler's ",(0,r.kt)("inlineCode",{parentName:"p"},"ApiResponse"),". It's possible to\ndefine a different response schema for each HTTP status code that a handler can return."),(0,r.kt)("p",null,"When response validation fails, the ",(0,r.kt)("inlineCode",{parentName:"p"},"onResponseInvalid")," hook is called and a default ",(0,r.kt)("inlineCode",{parentName:"p"},"500 Internal Error"),"\nresponse is returned by the handler. You can customize this behaviour by returning a different ",(0,r.kt)("inlineCode",{parentName:"p"},"ApiResponse"),"\nfrom ",(0,r.kt)("inlineCode",{parentName:"p"},"onResponseInvalid"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const okResponseSchema = Joi.string().required();\nconst notFoundResponseSchema = Joi.string().valid("NOT_FOUND").required();\n\n@Api()\nclass ArnyQuotesHandler implements ApiHandler {\n  @ResponseSchema(200, okResponseSchema)\n  @ResponseSchema(404, notFoundResponseSchema)\n  public async invoke(@Path movie: string): Promise<ApiResponse> {\n    const quote = getQuote(movie);\n\n    if (quote) {\n      return new ResponseBuilder(quote).statusCode(200).build();\n    } else {\n      return new ResponseBuilder("NOT_FOUND").statusCode(404).build();\n    }\n  }\n}\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"@ResponseSchema")," decorator can also accept a single ",(0,r.kt)("inlineCode",{parentName:"p"},"ResponseValidationSchemaMap"),"\nwhich is particularly helpful for handlers that can respond with several status codes."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const responseSchema = {\n  200: Joi.string().required(),\n  404: Joi.string().valid("NOT_FOUND").required(),\n};\n\n@Api()\nclass ArnyQuotesHandler implements ApiHandler {\n  @ResponseSchema(responseSchema)\n  public async invoke(@Path movie: string): Promise<ApiResponse> {\n    const quote = getQuote(movie);\n\n    if (quote) {\n      return new ResponseBuilder(quote).statusCode(200).build();\n    } else {\n      return new ResponseBuilder("NOT_FOUND").statusCode(404).build();\n    }\n  }\n}\n')),(0,r.kt)("h2",{id:"aliases"},"Aliases"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"@RequestSchema")," can be shortened to ",(0,r.kt)("inlineCode",{parentName:"li"},"@ReqSchema"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"@ResponseSchema")," can be shortened to ",(0,r.kt)("inlineCode",{parentName:"li"},"@ResSchema"),".")))}m.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[934],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return d}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),g=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=g(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=g(t),d=i,m=p["".concat(s,".").concat(d)]||p[d]||u[d]||a;return t?r.createElement(m,o(o({ref:n},c),{},{components:t})):r.createElement(m,o({ref:n},c))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=p;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var g=2;g<a;g++)o[g]=t[g];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},3799:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return l},metadata:function(){return g},toc:function(){return u}});var r=t(3117),i=t(102),a=(t(7294),t(3905)),o=["components"],l={},s="Logging",g={unversionedId:"usage/logging",id:"usage/logging",title:"Logging",description:"Log messages in Bigsby are produced in a structured JSON format. Noise is kept to a minimum by default, limited to the",source:"@site/docs/usage/logging.mdx",sourceDirName:"usage",slug:"/usage/logging",permalink:"/bigsby/docs/usage/logging",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Configuration",permalink:"/bigsby/docs/usage/configuration"},next:{title:"Dependency Injection",permalink:"/bigsby/docs/usage/dependency-injection"}},c={},u=[{value:"Levels",id:"levels",level:2},{value:"Environment variable",id:"environment-variable",level:2},{value:"Bigsby configuration",id:"bigsby-configuration",level:2},{value:"Logger override",id:"logger-override",level:3}],p={toc:u};function d(e){var n=e.components,t=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"logging"},"Logging"),(0,a.kt)("p",null,"Log messages in Bigsby are produced in a structured JSON format. Noise is kept to a minimum by default, limited to the\nincoming request path and outgoing response status code. Logging behaviour can be customized using configuration or\nusing an environment variable. By default, logging is enabled and set to the ",(0,a.kt)("inlineCode",{parentName:"p"},"info")," log level."),(0,a.kt)("h2",{id:"levels"},"Levels"),(0,a.kt)("p",null,"Supported log levels:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"debug"),": verbose debugging information."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"info"),": light incoming/outgoing message metadata."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"warn"),": notable events that won't result in the pre-mature termination of the request execution lifecycle, but should\nbe addressed."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"error"),": events that result in the pre-mature termination of the request execution lifecycle.")),(0,a.kt)("h2",{id:"environment-variable"},"Environment variable"),(0,a.kt)("p",null,"Logging behaviour can be defined using the ",(0,a.kt)("inlineCode",{parentName:"p"},"BIGSBY_LOG")," environment variable. Configuration set at this\nlevel will override configurations provided to the Bigsby instance."),(0,a.kt)("p",null,"A comma separated string of instance names and log levels is parsed at runtime to determine behaviour (a Bigsby\ninstance can be given a name at the point of instantiation as a constructor argument)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// "{instanceName}={logLevel},{instanceName}={logLevel}"\nprocess.env.BIGSBY_LOG="bigsby=info,myapp=error";\n')),(0,a.kt)("p",null,"A wildcard ",(0,a.kt)("inlineCode",{parentName:"p"},"*")," can be specified to turn logging on at the ",(0,a.kt)("inlineCode",{parentName:"p"},"debug")," level for all instances."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'process.env.BIGSBY_LOG="*";\n')),(0,a.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"The default instance name is ",(0,a.kt)("inlineCode",{parentName:"p"},"bigsby"),", which increments to ",(0,a.kt)("inlineCode",{parentName:"p"},"bigsby(1)"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"bigsby(2)")," etc. if multiple un-named\ninstances are created."))),(0,a.kt)("h2",{id:"bigsby-configuration"},"Bigsby configuration"),(0,a.kt)("p",null,"Logging config can be defined when creating a Bigsby instance, as per below."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const bigsby = new Bigsby(\n  {\n    logging: {\n      enabled: true,\n      level: LogLevel.INFO,\n    }\n  }\n);\n")),(0,a.kt)("h3",{id:"logger-override"},"Logger override"),(0,a.kt)("p",null,"It's possible to BYO logger by providing an object or class which implements the ",(0,a.kt)("inlineCode",{parentName:"p"},"BigsbyLogger")," interface. If your chosen\nlogger doesn't fit this interface out of the box, it's recommended to write adapter function."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const loggerAdapter: BigsbyLogger = {\n  info: (msg: string, ...meta: any[]) => myLogger.info(msg), // <- transform inputs here to desired format\n  // ... other methods\n}\n\n\nconst bigsby = new Bigsby(\n  {\n    logging: {\n      logger: loggerAdapter\n    }\n  }\n);\n")))}d.isMDXComponent=!0}}]);